
/* Generated By:JJTree: Do not edit this line. ASTDot.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTDot extends SimpleNode {
  private  boolean already_calculated_return;
  public ASTDot(int id) {
    super(id);
    this.identity = ".";
    this.return_type="";
    already_calculated_return = false;
  }

  public ASTDot(Javamm p, int id) {
    super(p, id);
    this.identity = ".";
    this.return_type="";
    already_calculated_return = false;
  }

  @Override
  public String getReturnType(SymbolTable symbol_table){
    if(this.return_type=="" && !already_calculated_return)
      setReturnType(symbol_table);
    return this.return_type;
  }

  @Override
  public String getReturnType(){
    return this.return_type;
  }

  private void setReturnType(SymbolTable symbol_table){
    if(this.jjtGetNumChildren() == 2) {
      SimpleNode left_child = (SimpleNode) this.jjtGetChild(0);
      SimpleNode right_child = (SimpleNode) this.jjtGetChild(1);

      if(right_child.getIdentity() == "length"){
        if(symbol_table.checkVariable(this.getScope(), left_child.getIdentity(), "int[]") ||
                symbol_table.checkMethod(left_child.getIdentity(), "int[]")){
          this.return_type="int";
        }
      }
      else if((left_child.getIdentity()=="new" && symbol_table.isClass(left_child.getReturnType())) ||
              left_child.getIdentity()=="this" || symbol_table.isClass(left_child.getIdentity()) ||
              symbol_table.checkVariable(this.getScope(), left_child.getIdentity(), symbol_table.class_name)){

        this.return_type = symbol_table.getMethodReturnType(right_child.getIdentity());
        if(this.return_type=="" && symbol_table.extendsClass()){
          this.return_type = symbol_table.getReturnMethodInExtendClass(right_child.getIdentity());
        }
      }
      else {
        this.return_type = symbol_table.getImportReturnType(left_child.getIdentity(), right_child.getIdentity());
      }
    }
    this.already_calculated_return = true;
  }

  //a.length -> verificar na symbol table se a Ã© um int[]
  //class.method() -> verificar se metodo da classe existe na symbol table
  //this.method ou (import) class.method
  @Override
  public void checkNodeSemantics(SymbolTable symbol_table){
    if(getReturnType(symbol_table) == "") {
      SimpleNode left_child = (SimpleNode) this.jjtGetChild(0);
      SimpleNode right_child = (SimpleNode) this.jjtGetChild(1);

      SemanticErrorHandler.getInstance().printError(this.getScope(),
              "Dot expression in not correctly defined or does not exist.",
              left_child.toString() + "." + right_child.toString());
    }
  }

  @Override
  public String toString(){
    return ".";
  }

}
/* JavaCC - OriginalChecksum=b8e6e003bad221985a0315e9e5ebd369 (do not edit this line) */
