/* Generated By:JJTree&JavaCC: Do not edit this line. Javamm.java */
import java.io.FileNotFoundException;

public class Javamm/*@bgen(jjtree)*/implements JavammTreeConstants, JavammConstants {/*@bgen(jjtree)*/
  protected JJTJavammState jjtree = new JJTJavammState();static int numErrors = 0;
    static final int MAX_NUM_ERRORS = 16;
        public static void main(String args[]) throws RuntimeException {
                try{
                    Javamm.numErrors = 0;
                    Javamm javamm = new Javamm(new java.io.FileInputStream(args[0]));
                    SimpleNode root = javamm.Start();

                    if (Javamm.numErrors > 0) {
                System.out.println("Errors ocurred");
                throw new RuntimeException();
            }

            root.dump("");

                } catch(FileNotFoundException e){
                    System.out.println("File not found");
                    System.exit(-1);
                }catch(ParseException e) { throw new RuntimeException(); }
        }

  final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
      ClassDeclaration();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ImportDeclaration() throws ParseException {
                                    /*@bgen(jjtree) Import */
                                     ASTImport jjtn000 = new ASTImport(JJTIMPORT);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);Token id;
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      id = jj_consume_token(ID);
                 jjtn000.identity =id.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case OPAREN:
        ImportDeclarationDot();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case BOOLEAN:
      case ID:
        Type();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ImportDeclarationDot() throws ParseException {
                                      Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      ASTImport jjtn001 = new ASTImport(JJTIMPORT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(DOT);
        id = jj_consume_token(ID);
                    jjtn001.identity = id.image;
        ImportDeclarationDot();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
    case OPAREN:
      jj_consume_token(OPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case BOOLEAN:
      case ID:
        Type();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COL:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          jj_consume_token(COL);
          Type();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(CPAREN);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassDeclaration() throws ParseException {
                                  /*@bgen(jjtree) Class */
                                   ASTClass jjtn000 = new ASTClass(JJTCLASS);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token id;
    try {
      jj_consume_token(CLASS);
      id = jj_consume_token(ID);
                         jjtn000.identity =id.image;
      ClassDeclarationExtends();
      jj_consume_token(OCURLY);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case INT:
        case BOOLEAN:
        case ID:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        MethodDeclaration();
      }
      jj_consume_token(CCURLY);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassDeclarationExtends() throws ParseException {
                                           /*@bgen(jjtree) Extends */
                                            ASTExtends jjtn000 = new ASTExtends(JJTEXTENDS);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);Token id;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        id = jj_consume_token(ID);
                         jjtn000.identity =id.image;
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VarDeclaration() throws ParseException {
                              /*@bgen(jjtree) Var */
                               ASTVar jjtn000 = new ASTVar(JJTVAR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token id;
    try {
      Type();
      id = jj_consume_token(ID);
                        jjtn000.identity =id.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        jj_consume_token(OCURLY);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COL:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          jj_consume_token(COL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            jj_consume_token(NUM);
            break;
          case ID:
            jj_consume_token(ID);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(CCURLY);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MethodDeclaration() throws ParseException {
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      MainDeclaration();
      break;
    case VOID:
    case INT:
    case BOOLEAN:
    case ID:
      FunctionDeclaration();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MainDeclaration() throws ParseException {
                                /*@bgen(jjtree) Main */
                                 ASTMain jjtn000 = new ASTMain(JJTMAIN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token id;
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(OPAREN);
      jj_consume_token(STRING);
      jj_consume_token(OSBRACKET);
      jj_consume_token(CSBRACKET);
      id = jj_consume_token(ID);
                                                                                  jjtn000.identity =id.image;
      jj_consume_token(CPAREN);
      jj_consume_token(OCURLY);
      label_6:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_6;
        }
        VarDeclaration();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case MINUS:
        case NOT:
        case OCURLY:
        case OPAREN:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        Statement();
      }
      jj_consume_token(CCURLY);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionDeclaration() throws ParseException {
                                      /*@bgen(jjtree) Method */
                                       ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token id;
    try {
      Type();
      id = jj_consume_token(ID);
                        jjtn000.identity =id.image;
      jj_consume_token(OPAREN);
      ArgList();
      jj_consume_token(CPAREN);
      jj_consume_token(OCURLY);
      label_8:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_8;
        }
        VarDeclaration();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case MINUS:
        case NOT:
        case OCURLY:
        case OPAREN:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOL);
      jj_consume_token(CCURLY);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Arg() throws ParseException {
                   /*@bgen(jjtree) Arg */
                    ASTArg jjtn000 = new ASTArg(JJTARG);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token id;
    try {
      Type();
      id = jj_consume_token(ID);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.identity =id.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ArgList() throws ParseException {
                              /*@bgen(jjtree) MethodArgs */
  ASTMethodArgs jjtn000 = new ASTMethodArgs(JJTMETHODARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case BOOLEAN:
      case ID:
        Arg();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COL:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_10;
          }
          jj_consume_token(COL);
          Arg();
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OSBRACKET:
        jj_consume_token(OSBRACKET);
        jj_consume_token(CSBRACKET);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCURLY:
      jj_consume_token(OCURLY);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case MINUS:
        case NOT:
        case OCURLY:
        case OPAREN:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
        Statement();
      }
      jj_consume_token(CCURLY);
      break;
    case IF:
          ASTIf jjtn001 = new ASTIf(JJTIF);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(IF);
        jj_consume_token(OPAREN);
        Expression();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case TRUE:
          case FALSE:
          case THIS:
          case LTHAN:
          case GTHAN:
          case PLUS:
          case MINUS:
          case ASTERISK:
          case FSLASH:
          case DEQUALS:
          case AND:
          case NOT:
          case OPAREN:
          case NUM:
          case ID:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_12;
          }
          ExpressionsConnector();
        }
        jj_consume_token(CPAREN);
        Statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          Statement();
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case NEW:
    case TRUE:
    case FALSE:
    case THIS:
    case MINUS:
    case NOT:
    case OPAREN:
    case NUM:
    case ID:
      if (jj_2_3(2)) {
        jj_consume_token(ID);
        StatementId();
      } else {
        ;
      }
      Expression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case LTHAN:
        case GTHAN:
        case PLUS:
        case MINUS:
        case ASTERISK:
        case FSLASH:
        case DEQUALS:
        case AND:
        case NOT:
        case OPAREN:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
        ExpressionsConnector();
      }
      jj_consume_token(SEMICOL);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(OPAREN);
          ASTWhile jjtn002 = new ASTWhile(JJTWHILE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        try {
          Expression();
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NEW:
            case TRUE:
            case FALSE:
            case THIS:
            case LTHAN:
            case GTHAN:
            case PLUS:
            case MINUS:
            case ASTERISK:
            case FSLASH:
            case DEQUALS:
            case AND:
            case NOT:
            case OPAREN:
            case NUM:
            case ID:
              ;
              break;
            default:
              jj_la1[25] = jj_gen;
              break label_14;
            }
            ExpressionsConnector();
          }
          jj_consume_token(CPAREN);
        } catch (ParseException e) {
        System.out.println(e.toString());  // print the error message
        Token t;
        Javamm.numErrors++; // Increase the number of errors since execution

        if (Javamm.numErrors > Javamm.MAX_NUM_ERRORS) { // Chose 5 but this value should be passed through command line maybe?
            System.out.println("Too many errors. Aborting. (" + Javamm.numErrors + ")");
            {if (true) throw e;}
        }

        while(true) {
          t = getToken(1); // Skip the tokens until the close of parenthesis
          if(t.kind == CPAREN || t.kind == CCURLY){
            t = getNextToken();
            t=getToken(1);
            if(t.kind != CPAREN)
                break;
          }
          else if(t.kind == OCURLY)
            break;
          else t = getNextToken();
        }
        }
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      Statement();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void StatementId() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    case OSBRACKET:
      jj_consume_token(OSBRACKET);
      Expression();
      jj_consume_token(CSBRACKET);
      jj_consume_token(EQUALS);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    ExpressionTerminal();
    if (jj_2_4(2)) {
      ExpressionL();
    } else {
      ;
    }
  }

  final public void ExpressionL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case TRUE:
    case FALSE:
    case THIS:
    case LTHAN:
    case GTHAN:
    case PLUS:
    case MINUS:
    case ASTERISK:
    case FSLASH:
    case DEQUALS:
    case AND:
    case NOT:
    case OPAREN:
    case NUM:
    case ID:
      ExpressionsConnector();
      break;
    case OSBRACKET:
      jj_consume_token(OSBRACKET);
      Expression();
      jj_consume_token(CSBRACKET);
      break;
    case DOT:
      ExpressionDot();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpressionDot() throws ParseException {
    jj_consume_token(DOT);
    ExpressionDotL();
  }

  final public void ExpressionDotL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEN:
      jj_consume_token(LEN);
      break;
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPAREN:
        jj_consume_token(OPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case MINUS:
        case NOT:
        case OPAREN:
        case NUM:
        case ID:
          Expression();
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NEW:
            case TRUE:
            case FALSE:
            case THIS:
            case LTHAN:
            case GTHAN:
            case PLUS:
            case MINUS:
            case ASTERISK:
            case FSLASH:
            case DEQUALS:
            case AND:
            case NOT:
            case OPAREN:
            case NUM:
            case ID:
              ;
              break;
            default:
              jj_la1[30] = jj_gen;
              break label_15;
            }
            ExpressionsConnector();
          }
          label_16:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COL:
              ;
              break;
            default:
              jj_la1[31] = jj_gen;
              break label_16;
            }
            jj_consume_token(COL);
            Expression();
            label_17:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NEW:
              case TRUE:
              case FALSE:
              case THIS:
              case LTHAN:
              case GTHAN:
              case PLUS:
              case MINUS:
              case ASTERISK:
              case FSLASH:
              case DEQUALS:
              case AND:
              case NOT:
              case OPAREN:
              case NUM:
              case ID:
                ;
                break;
              default:
                jj_la1[32] = jj_gen;
                break label_17;
              }
              ExpressionsConnector();
            }
          }
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(CPAREN);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpressionTerminal() throws ParseException {
                                     Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      id = jj_consume_token(NUM);
                   ASTInt jjtn001 = new ASTInt(JJTINT);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                  jjtn001.identity =id.image;
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
      break;
    case TRUE:
          ASTTrue jjtn002 = new ASTTrue(JJTTRUE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TRUE);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
    case FALSE:
          ASTFalse jjtn003 = new ASTFalse(JJTFALSE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(FALSE);
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
      break;
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPAREN:
        jj_consume_token(OPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case INT:
        case BOOLEAN:
        case ID:
          Type();
          label_18:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COL:
              ;
              break;
            default:
              jj_la1[36] = jj_gen;
              break label_18;
            }
            jj_consume_token(COL);
            Type();
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(CPAREN);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    case THIS:
          ASTThis jjtn004 = new ASTThis(JJTTHIS);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(THIS);
      } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
      }
      break;
    case NOT:
      jj_consume_token(NOT);
                ASTNot jjtn005 = new ASTNot(JJTNOT);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
      try {
        Expression();
      } catch (Throwable jjte005) {
                if (jjtc005) {
                  jjtree.clearNodeScope(jjtn005);
                  jjtc005 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte005 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte005;}
                }
                if (jjte005 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte005;}
                }
                {if (true) throw (Error)jjte005;}
      } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005, true);
                }
      }
      break;
    case NEW:
      ExpressionNew();
      break;
    case OPAREN:
      jj_consume_token(OPAREN);
      Expression();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case LTHAN:
        case GTHAN:
        case PLUS:
        case MINUS:
        case ASTERISK:
        case FSLASH:
        case DEQUALS:
        case AND:
        case NOT:
        case OPAREN:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_19;
        }
        ExpressionsConnector();
      }
      jj_consume_token(CPAREN);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpressionNew() throws ParseException {
    jj_consume_token(NEW);
    ExpressionNewL();
  }

  final public void ExpressionNewL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      jj_consume_token(OSBRACKET);
      Expression();
      jj_consume_token(CSBRACKET);
      break;
    case ID:
      jj_consume_token(ID);
      jj_consume_token(OPAREN);
      jj_consume_token(CPAREN);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpressionsConnector() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LTHAN:
    case GTHAN:
    case PLUS:
    case MINUS:
    case ASTERISK:
    case FSLASH:
    case DEQUALS:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEQUALS:
        jj_consume_token(DEQUALS);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case LTHAN:
        jj_consume_token(LTHAN);
        break;
      case GTHAN:
        jj_consume_token(GTHAN);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case ASTERISK:
        jj_consume_token(ASTERISK);
        break;
      case FSLASH:
        jj_consume_token(FSLASH);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    Expression();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(OSBRACKET)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(OSBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(OSBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(OPAREN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(OPAREN)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavammTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x800,0x0,0x61000,0x0,0x61000,0x0,0x61000,0x400,0x200,0x0,0x0,0x0,0x0,0x61800,0x23c82000,0x23c82000,0x0,0x61000,0x0,0x61000,0x23c82000,0xff802000,0x200000,0xff802000,0xff802000,0x23c82000,0x0,0x20000000,0xff802000,0xff802000,0x0,0xff802000,0x23802000,0x0,0x4000,0x0,0x61000,0x0,0xff802000,0x3802000,0x20000,0xfc000000,0xfc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x220,0x8000,0x10,0x8000,0x220,0x8000,0x0,0x0,0xc000,0x10,0xc000,0x1,0x8000,0xc2c0,0xc2c0,0x10,0x8000,0x800,0x8000,0xc2c0,0xc246,0x0,0xc246,0xc246,0xc2c0,0x801,0x0,0xca66,0xc246,0x10,0xc246,0xc240,0x200,0x8000,0x10,0x8000,0x200,0xc246,0xc240,0x8000,0x6,0x6,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Javamm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Javamm(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavammTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Javamm(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavammTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Javamm(JavammTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavammTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
