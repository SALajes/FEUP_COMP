/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Javamm.jj */
/*@egen*/options {
	LOOKAHEAD = 1;
}

PARSER_BEGIN(Javamm)

public class Javamm/*@bgen(jjtree)*/implements JavammTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJavammState jjtree = new JJTJavammState();

/*@egen*/
    static int numErrors = 0;
    static final int MAX_NUM_ERRORS = 5;
	public static void main(String args[]) throws ParseException {
		Javamm javamm = new Javamm(System.in);
		SimpleNode root = javamm.Start();
		root.dump("");
	}
}

PARSER_END(Javamm)

SKIP: {
	" " | "\r" | "\t" | "\n"
	| < "//"(~["\n","\r"])*("\n" | "\r" | "\r\n")>
	| < "/*"(~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN: {
  < IMPORT: "import" >
| < CLASS: "class" >
| < EXTENDS: "extends" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < NEW: "new" >
| < LEN: "length" >
| < MAIN: "main" >
| < STRING: "String" >
| < INT: "int" >
| < BOOLEAN: "boolean" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < LTHAN: "<" >
| < GTHAN: ">" >
| < PLUS: "+" >
| < MINUS: "-" >
| < ASTERISK: "*" >
| < FSLASH: "/" >
| < EQUALS: "=" >
| < AND: "&&" >
| < SEMICOL: ";" >
| < COL: "," >
| < DOT: "." >
| < NOT: "!" >
| < OCURLY: "{" >
| < CCURLY: "}" >
| < OPAREN: "(" >
| < CPAREN: ")" >
| < OSBRACKET: "[" >
| < CSBRACKET: "]" >
| < RETURN: "return" >
| < NUM: ((["0"-"9"])+) >
| < ID: (["A"-"Z", "a"-"z", "_", "$"](["0"-"9", "A"-"Z", "a"-"z", "_", "$"])*) >
}

SimpleNode Start(): {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) Start */
        try {
/*@egen*/ 
	( ImportDeclaration() )*
	ClassDeclaration() <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ImportDeclaration()      : { } {
	<IMPORT> [<STATIC>]
	<ID> [(<DOT> <ID> )* <OPAREN> Type() (<COL> Type())* <CPAREN>]
	[Type()]
	<SEMICOL>
}

void ClassDeclaration()      : { } {
	<CLASS> <ID> [ <EXTENDS> <ID> ] <OCURLY>
		( VarDeclaration() )*
		( MethodDeclaration() )*
	<CCURLY>
}

void VarDeclaration()       : { } {
	Type() <ID> <SEMICOL>
}

void MethodDeclaration()       : { } {
	<PUBLIC> ( MainDeclaration() | FunctionDeclaration())
}

void MainDeclaration()       : { } {
	<STATIC> <VOID> <MAIN> <OPAREN> <STRING> <OSBRACKET> <CSBRACKET> <ID> <CPAREN> <OCURLY>
		( LOOKAHEAD(2) VarDeclaration() )*
		( Statement() ) *
	<CCURLY>
}

void FunctionDeclaration()       : { } {
	Type() <ID> <OPAREN> [ Type() <ID> (<COL> Type() <ID> )* ] <CPAREN> <OCURLY>
		( LOOKAHEAD(2) VarDeclaration() )*
		( Statement() )*
		<RETURN> Expression() <SEMICOL>/*@bgen(jjtree) Term */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTTERM);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<CCURLY>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/
	     
}

void Type()       : { } {
	(<INT> [<OSBRACKET> <CSBRACKET>])
	|
	<BOOLEAN>
	|
	<ID>
	|
	<VOID>
}

void Statement()       : { } {
	(<OCURLY> (Statement())* <CCURLY>)
	|
	(<IF> <OPAREN> Expression() <CPAREN> Statement() <ELSE> Statement())
	|
	[LOOKAHEAD(2) <ID> StatementId()] (Expression() <SEMICOL>)
	|
	<WHILE> <OPAREN>
	try {
	    (Expression() <CPAREN>) // We only need to check for errors inside the while parenthesis
	} catch(ParseException e) {
        System.out.println(e.toString());  // print the error message
        Token t;
        Javamm.numErrors++; // Increase the number of errors since execution

        if (Javamm.numErrors > 5) { // Chose 5 but this value should be passed through command line maybe?
        System.out.println("Too many errors. Aborting.");
        System.exit(-1);
        }

        do {
          t = getNextToken(); // Skip the tokens until the close of parenthesis
        } while (t.kind != CPAREN);
          // The above loop consumes tokens all the way up to a token of
          // "kind".  We use a do-while loop rather than a while because the
          // current token is the one immediately before the erroneous token
          // (in our case the token immediately before what should have been
          // "if"/"while".
	}
	Statement()
}

void StatementId()       : { } {
	<EQUALS>
	|
	(<OSBRACKET> Expression() <CSBRACKET> <EQUALS>)
}

void Expression()       : { } {
	ExpressionTerminal() ( LOOKAHEAD(2) ExpressionL())?
 }

 void ExpressionL()       : { } {
 	(<AND> | <LTHAN> | <PLUS> | <MINUS> | <ASTERISK> | <FSLASH>) Expression()
 	|
 	(<OSBRACKET> Expression() <CSBRACKET>)
 	|
 	ExpressionDot()
 }

 void ExpressionDot()       : { } {
 	<DOT> ExpressionDotL()
 }

 void ExpressionDotL()       : { } {
 	<LEN>
 	|
 	(<ID> <OPAREN> [Expression() (<COL> Expression())*] <CPAREN>)
 }

 void ExpressionTerminal()       : { } {
 	<NUM>
 	|
 	<TRUE>
 	|
 	<FALSE>
 	|
 	<ID>
 	|
 	<THIS>
 	|
 	<NOT> Expression()
 	|
 	ExpressionNew()
 	|
 	(<OPAREN> Expression() <CPAREN>)
 }

 void ExpressionNew()       : { } {
 	<NEW> ExpressionNewL()
 }

void ExpressionNewL()       : { } {
	(<INT> <OSBRACKET> Expression() <CSBRACKET>)
	|
	(<ID> <OPAREN> <CPAREN>)
}