options {
	LOOKAHEAD = 1;
	STATIC = false;
	MULTI = true;
}

PARSER_BEGIN(Javamm)

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Javamm {
    static int numErrors = 0;
    static final int MAX_NUM_ERRORS = 16;
	public static void main(String args[]) throws RuntimeException {
		try{
		    Javamm.numErrors = 0;
		    Javamm javamm = new Javamm(new java.io.FileInputStream(args[0]));
		    SimpleNode root = javamm.Start();

		    if (Javamm.numErrors > 0) {
                System.out.println("Errors ocurred");
                throw new RuntimeException();
            }

            root.dump("");

		} catch(FileNotFoundException e){
		    System.out.println("File not found");
		    System.exit(-1);
		}catch(ParseException e) { throw new RuntimeException(); }
	}
}

PARSER_END(Javamm)

SKIP: {
	" " | "\r" | "\t" | "\n"
	| < "//"(~["\n","\r"])*("\n" | "\r" | "\r\n")>
	| < "/*"(~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN: {
  < IMPORT: "import" >
| < CLASS: "class" >
| < EXTENDS: "extends" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < NEW: "new" >
| < LEN: "length" >
| < MAIN: "main" >
| < STRING: "String" >
| < INT: "int" >
| < BOOLEAN: "boolean" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < LTHAN: "<" >
| < GTHAN: ">" >
| < PLUS: "+" >
| < MINUS: "-" >
| < ASTERISK: "*" >
| < FSLASH: "/" >
| < EQUALS: "=" >
| < DEQUALS: "==" >
| < AND: "&&" >
| < SEMICOL: ";" >
| < COL: "," >
| < DOT: "." >
| < NOT: "!" >
| < OCURLY: "{" >
| < CCURLY: "}" >
| < OPAREN: "(" >
| < CPAREN: ")" >
| < OSBRACKET: "[" >
| < CSBRACKET: "]" >
| < RETURN: "return" >
| < NUM: ((["0"-"9"])+) >
| < ID: (["A"-"Z", "a"-"z", "_", "$"](["0"-"9", "A"-"Z", "a"-"z", "_", "$"])*) >
}

SimpleNode Start() : { } {
	( ImportDeclaration() )*
	ClassDeclaration() <EOF> 
	{ return jjtThis; }
}

void ImportDeclaration() #Import : { Token id; } {
	<IMPORT>  [<STATIC> ]
	id=<ID> {jjtThis.ident=id.image;} [ ImportDeclarationDot() ]
	[Type()]
	<SEMICOL>
}

void ImportDeclarationDot() #void : { Token id; } {
    (<DOT> id=<ID> {jjtThis.ident = id.image;}  ImportDeclarationDot()) #Import
    |
    <OPAREN> [ Type() (<COL> Type())* ] <CPAREN>
}

void ClassDeclaration() #Class : { Token id; } {
	<CLASS> id=<ID> {jjtThis.ident=id.image;} ClassDeclarationExtends() <OCURLY>
		( VarDeclaration() )*
		( MethodDeclaration() )*
	<CCURLY>
}

void ClassDeclarationExtends() #Extends : { Token id; } {
    ( <EXTENDS> id=<ID> {jjtThis.ident=id.image;} )?
}

void VarDeclaration() #Var : { Token id; } {
	Type() id=<ID> {jjtThis.ident=id.image;} [ <EQUALS> <OCURLY> (<NUM>|<ID>) (<COL> (<NUM>|<ID>))* <CCURLY> ]<SEMICOL> //curly solve
}

void MethodDeclaration() #void : { } {
	<PUBLIC> ( MainDeclaration() | FunctionDeclaration())
}

void MainDeclaration() #Main : { Token id; } {
	<STATIC> <VOID> <MAIN> <OPAREN> <STRING> <OSBRACKET> <CSBRACKET> id=<ID> {jjtThis.ident=id.image;} <CPAREN> <OCURLY>
		( LOOKAHEAD(2) VarDeclaration() )*
		( Statement() ) *
	<CCURLY>
}

void FunctionDeclaration() #Method : { Token id; } {
	Type() id=<ID> {jjtThis.ident=id.image;} <OPAREN> ArgList() <CPAREN> <OCURLY>
		( LOOKAHEAD(2) VarDeclaration() )*
		( Statement() )*
		<RETURN> Expression() <SEMICOL>
	<CCURLY>
}

void Arg() #Arg : { Token id; } {
    Type() id=<ID> {jjtThis.ident=id.image;}
}

void ArgList() #MethodArgs : { } {
    [ Arg() (<COL> Arg())* ]
}

void Type() #void : { } {
	(<INT> [<OSBRACKET> <CSBRACKET>])
	|
	<BOOLEAN>
	|
	<ID>
	|
	<VOID>
}

void Statement() #void : { } {
	(<OCURLY> (Statement())* <CCURLY>)
	|
	(<IF> <OPAREN> Expression()  (ExpressionsConnector())* <CPAREN> Statement() [<ELSE> Statement()]) #If//before forced an else
	|
	[LOOKAHEAD(2) <ID> StatementId()] Expression()  (ExpressionsConnector())* <SEMICOL>
	|
	<WHILE> <OPAREN>
	try {
	    //		while (i +) {
	    (Expression()  (ExpressionsConnector())* <CPAREN>) // We only need to check for errors inside the while parenthesis
	} catch(ParseException e) {
        System.out.println(e.toString());  // print the error message
        Token t;
        Javamm.numErrors++; // Increase the number of errors since execution

        if (Javamm.numErrors > Javamm.MAX_NUM_ERRORS) { // Chose 5 but this value should be passed through command line maybe?
            System.out.println("Too many errors. Aborting. (" + Javamm.numErrors + ")");
            throw e;
        }

        while(true) {
          t = getToken(1); // Skip the tokens until the close of parenthesis
          if(t.kind == CPAREN || t.kind == CCURLY){
            t = getNextToken();
            t=getToken(1);
            if(t.kind != CPAREN)
                break;
          }
          else if(t.kind == OCURLY)
            break;
          else t = getNextToken();
        }
	}  #While
	Statement()
}

void StatementId() #void : { } {
	<EQUALS>
	|
	(<OSBRACKET> Expression() <CSBRACKET> <EQUALS>)
}

void Expression() #void : { } {
	[<MINUS>] ExpressionTerminal() ( LOOKAHEAD(2) ExpressionL())?
 }

 void ExpressionL() #void : { } {
 	ExpressionsConnector()
 	|
 	(<OSBRACKET> Expression() <CSBRACKET>)
 	|
 	ExpressionDot()
 }

 void ExpressionDot() #void : { } {
 	<DOT> ExpressionDotL()
 }

 void ExpressionDotL() #void : { } {
 	<LEN>
 	|
 	(<ID> [<OPAREN> [(Expression() (ExpressionsConnector())*) (<COL> (Expression() (ExpressionsConnector())*))*] <CPAREN>])
 }

 void ExpressionTerminal() #void : { Token id;} {
 	id=<NUM> {jjtThis.ident=id.image;} #Int
 	|
 	<TRUE> #True
 	|
 	<FALSE> #False
 	|
 	<ID> [ <OPAREN> [Type() (<COL> Type())*] <CPAREN>] // a = Cenas(a,b); solve
 	|
 	<THIS> #This
 	|
 	<NOT> Expression() #Not
 	|
 	ExpressionNew()
 	|
 	(<OPAREN> Expression() (ExpressionsConnector())* <CPAREN>)
 }

 void ExpressionNew() #void : { } {
 	<NEW> ExpressionNewL()
 }

void ExpressionNewL() #void : { } {
	(<INT> <OSBRACKET> Expression() <CSBRACKET>)
	|
	(<ID> <OPAREN> <CPAREN>)
}

void ExpressionsConnector() #void : { } {
    [(<DEQUALS> | <AND> | <LTHAN> | <GTHAN> | <PLUS> | <MINUS> | <ASTERISK> | <FSLASH>)] Expression() //== solve, not the best bc i cant have ex: a = b == c
}