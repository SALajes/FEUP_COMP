options {
	LOOKAHEAD = 1;
	STATIC = false;
	MULTI = true;
}

PARSER_BEGIN(Javamm)

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Javamm {
    static final int MAX_NUM_ERRORS = 16;

    private int numErrors = 0;

    public int getNumErrors(){
        return numErrors;
    }
}

PARSER_END(Javamm)

SKIP: {
	" " | "\r" | "\t" | "\n"
	| < "//"(~["\n","\r"])*("\n" | "\r" | "\r\n")>
	| < "/*"(~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN: {
  < IMPORT: "import" >
| < CLASS: "class" >
| < EXTENDS: "extends" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < NEW: "new" >
| < LEN: "length" >
| < MAIN: "main" >
| < STRING: "String" >
| < INT: "int" >
| < BOOLEAN: "boolean" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < LTHAN: "<" >
| < GTHAN: ">" >
| < PLUS: "+" >
| < MINUS: "-" >
| < ASTERISK: "*" >
| < FSLASH: "/" >
| < EQUALS: "=" >
| < DEQUALS: "==" >
| < AND: "&&" >
| < SEMICOL: ";" >
| < COL: "," >
| < DOT: "." >
| < NOT: "!" >
| < OCURLY: "{" >
| < CCURLY: "}" >
| < OPAREN: "(" >
| < CPAREN: ")" >
| < OSBRACKET: "[" >
| < CSBRACKET: "]" >
| < RETURN: "return" >
| < NUM: ((["0"-"9"])+) >
| < ID: (["A"-"Z", "a"-"z", "_", "$"](["0"-"9", "A"-"Z", "a"-"z", "_", "$"])*) >
}

SimpleNode Start() : { } {
	( ImportDeclaration() )*
	ClassDeclaration() <EOF> 
	{ return jjtThis; }
}

void ImportDeclaration() #Import : { String type; Token t; } {
	<IMPORT>  [ <STATIC> { jjtThis.setStatic(true); } ]
	t=<ID> { jjtThis.setClassName(t.image); }
	[ <DOT> t=<ID> {jjtThis.setMethodName(t.image); } ]
	[ <OPAREN> ParamList() <CPAREN> ]
	[ <VOID> | type=Type() {jjtThis.setReturnType(type); } ]
	<SEMICOL>
}

void ParamList() #void : { } {
    [ <VOID> | Type() (<COL> Type())* ]
}

void ClassDeclaration() #Class : { Token class_id, extend_class; } {
	<CLASS> class_id=<ID> { jjtThis.setClassName(class_id.image); }
	  ( <EXTENDS> extend_class=<ID> { jjtThis.setExt(extend_class.image); } )? <OCURLY>
		( VarDeclaration() )*
		( MethodsDeclaration() )*
	<CCURLY>
}

void VarDeclaration() : { String type; Token id; } {
	type=Type() id=<ID> { jjtThis.setType(type); jjtThis.setVarName(id.image); } <SEMICOL>
}

void MethodsDeclaration() #void : { } {
	<PUBLIC> ( MainDeclaration() | MethodDeclaration())
}

void MainDeclaration() #Main : { Token id; } {
	<STATIC> <VOID> <MAIN> <OPAREN> <STRING> <OSBRACKET> <CSBRACKET> id=<ID> { jjtThis.setArgs(id.image); } <CPAREN> <OCURLY>
		( LOOKAHEAD(2) VarDeclaration() )*
		( Statement() ) *
	<CCURLY>
}

void MethodDeclaration() #Method : { String type; Token id; } {
	type=Type() id=<ID> { jjtThis.setMethodName(id.image); jjtThis.setReturnType(type); } <OPAREN>
	    MethodArguments() <CPAREN> <OCURLY>
		( LOOKAHEAD(2) VarDeclaration() )*
		( Statement() )*
		<RETURN> Expression() <SEMICOL>
	<CCURLY>
}

void MethodArguments() #void : { } {
    [ Argument() (<COL> Argument())* ]
}

void Argument() #Arg : { String type; Token id; } {
    type=Type() id=<ID> { jjtThis.type=type; jjtThis.identity=id.image; }
}

String Type() #void : { String return_value; Token id; } {
	<INT> { return_value = "int"; }
	[<OSBRACKET> <CSBRACKET> { return_value = "int[]"; } ]
	{return return_value;}
	|
	<BOOLEAN> { return "boolean"; }
	|
	id=<ID> { return id.image; }
}

void Statement() #void: {} {
	(<OCURLY> (Statement())* <CCURLY>)
	|
	IfStatement()
	|
    WhileStatement()
	|
	( LOOKAHEAD(2)
        VariableInit()
        |
        Expression() <SEMICOL>
	)
}

void IfStatement() #If : {} {
    <IF> <OPAREN> Expression() <CPAREN>
    Statement() //Then 
    <ELSE>  Statement() //else
}

void WhileStatement() #While : {} {
    <WHILE> <OPAREN>
    try {
        (Expression())* <CPAREN> // We only need to check for errors inside the while parenthesis
    } catch(ParseException e) {
        System.out.println(e.toString());  // print the error message
        Token t;
        this.numErrors++; // Increase the number of errors since execution

        if (this.numErrors > Javamm.MAX_NUM_ERRORS) {
            System.out.println("Too many errors. Aborting. (" + this.numErrors + ")");
            throw e;
        }

        while(true) {
          t = getToken(1); // Skip the tokens until the close of parenthesis
          if(t.kind == CPAREN || t.kind == CCURLY){
            t = getNextToken();
            t=getToken(1);
            if(t.kind != CPAREN)
                break;
          }
          else if(t.kind == OCURLY)
            break;
          else t = getNextToken();
        }
    }
    Statement()
}

void VariableInit() : { Token id; } {
    id=<ID>
    (
        (<EQUALS> Expression()  { jjtThis.identity=id.image; } #VarInit )
        |
        (<OSBRACKET> (Expression() #Index) <CSBRACKET> <EQUALS> Expression()  { jjtThis.identity=id.image; } #ArrayInit)
    )
    <SEMICOL>
}

void Expression() #void : { } {
    //We will now dispose operators from lowest to highest precedence:
    // &&, <, + -, * /, new, !, (), ., []
    LessThan() (<AND> LessThan() #And(2) )*
 }

void LessThan() #void : {} {
    AdditionSubtraction() (<LTHAN> AdditionSubtraction() #LessThan(2))*
}

void AdditionSubtraction() #void : {Token operator;} {
    MultiplicationDivision()
    (
        (operator=<PLUS> | operator=<MINUS>) MultiplicationDivision() { jjtThis.setOperator(operator.image); }
        #AdditionSubtraction(2)
    )*
}

void MultiplicationDivision() #void : { Token operator; } {
    ExpressionIntermediateDivision()
    (
        (operator=<ASTERISK> | operator=<FSLASH> ) ExpressionTerminal() { jjtThis.setOperator(operator.image); }
        #MultiplicationDivision(2)
    )*
}

void ExpressionIntermediateDivision() #void : {} {
    <NOT> ExpressionIntermediateDivision() #Not
    |
    ExpressionTerminal() [<DOT> ExpressionDot()]
}

void ExpressionTerminal() #Term : { Token id;} {
    id=<NUM> {jjtThis.identity=id.image; jjtThis.type="int"; } #Integer
    |
    <TRUE> {jjtThis.identity="true"; jjtThis.type="boolean";} #True
    |
    <FALSE> {jjtThis.identity="false"; jjtThis.type="boolean"; } #False
    |
    <THIS> #This
    |
    id=<ID> {jjtThis.identity=id.image;} #ID [ <OSBRACKET> (Expression() #Index) <CSBRACKET> ]
    |
    <OPAREN> Expression() <CPAREN>
    |
    ExpressionNew()
}

void ExpressionDot() : { Token id; } {
    (id=<LEN>
    |
    (LOOKAHEAD(2) ExpressionTerminal() <DOT>)* id=<ID> <OPAREN> [Expression() (<COL> Expression())*] <CPAREN>)
    { jjtThis.identity=id.image; }
}

void ExpressionNew()  : { Token return_value; } {
    <NEW>
    (
        <INT> <OSBRACKET> (Expression() #Index) <CSBRACKET> { jjtThis.setReturnType("int[]"); }
        |
        return_value=<ID> { jjtThis.setReturnType(return_value.image); }  <OPAREN> <CPAREN>
    )
}