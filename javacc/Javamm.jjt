options {
	LOOKAHEAD = 1;
}

PARSER_BEGIN(Javamm)

public class Javamm {
	public static void main(String args[]) throws ParseException {
		Javamm javamm = new Javamm(System.in);
		SimpleNode root = javamm.Start();
		root.dump("");
	}
}

PARSER_END(Javamm)

SKIP: {
	" " | "\r" | "\t" | "\n"
}

TOKEN: {
  < IMPORT: "import" >
| < CLASS: "class" >
| < EXTENDS: "extends" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < NEW: "new" >
| < LEN: "length" >
| < MAIN: "main" >
| < STRING: "String" >
| < INT: "int" >
| < BOOLEAN: "boolean" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < LTHAN: "<" >
| < GTHAN: ">" >
| < PLUS: "+" >
| < MINUS: "-" >
| < ASTERISK: "*" >
| < FSLASH: "/" >
| < EQUALS: "=" >
| < AND: "&&" >
| < SEMICOL: ";" >
| < COL: "," >
| < DOT: "." >
| < NOT: "!" >
| < OCURLY: "{" >
| < CCURLY: "}" >
| < OPAREN: "(" >
| < CPAREN: ")" >
| < OSBRACKET: "[" >
| < CSBRACKET: "]" >
| < RETURN: "return" >
| < NUM: ((["0"-"9"])+) >
| < ID: (["A"-"Z", "a"-"z", "_", "$"](["0"-"9", "A"-"Z", "a"-"z", "_", "$"])*) >
}

SimpleNode Start(): { } { 
	( ImportDeclaration() )*
	ClassDeclaration() <EOF> 
	{ return jjtThis; }
}

void ImportDeclaration(): { } {
	<IMPORT>
	<ID> [(<DOT> <ID> )* <OPAREN> Type() (<COL> Type())* <CPAREN>]
	<SEMICOL>
}

void ClassDeclaration(): { } {
	<CLASS> <ID> [ <EXTENDS> <ID> ] <OCURLY>
		( VarDeclaration() )*
		( MethodDeclaration() )*
	<CCURLY>
}

void VarDeclaration(): { } {
	Type() <ID> <SEMICOL>
}

void MethodDeclaration(): { } {
	<PUBLIC> ( MainDeclaration() | FunctionDeclaration())
}

void MainDeclaration(): { } {
	<STATIC> <VOID> <MAIN> <OPAREN> <STRING> <OSBRACKET> <CSBRACKET> <ID> <CPAREN> <OCURLY>
		( 
			LOOKAHEAD(2) 
			VarDeclaration() 
		)*
		( Statement() )
	<CCURLY>
} 

void FunctionDeclaration(): { } {
	Type() <ID> <OPAREN> [ Type() <ID> (<COL> Type() <ID> )* ] <CPAREN> <OCURLY>
		( 
			LOOKAHEAD(2) 
			VarDeclaration() 
		)*
		( Statement() )*
		<RETURN> Expression() <SEMICOL>
	<CCURLY>
}

void Type(): { } {
	(<INT> [<OSBRACKET> <CSBRACKET>])
	|
	<BOOLEAN>
	|
	<ID>
}

void Statement(): { } {
	(<OCURLY> (Statement())* <CCURLY>)
	| 
	(<IF> <OPAREN> Expression() <CPAREN> Statement() <ELSE> Statement())
	|
	(<WHILE> <OPAREN> Expression() <CPAREN> Statement())
	|
	[LOOKAHEAD(2) <ID> StatementId()] (Expression() <SEMICOL>)
} 

void StatementId(): { } {
	<EQUALS>
	|
	(<OSBRACKET> Expression() <CSBRACKET> <EQUALS>)
}

void Expression(): { } {
	ExpressionTerminal() (ExpressionL())?
} 

void ExpressionL(): { } {
	(<AND> | <LTHAN> | <PLUS> | <MINUS> | <ASTERISK> | <FSLASH>) Expression()
	|
	(<OSBRACKET> Expression() <CSBRACKET>)
	|
	ExpressionDot()
}

void ExpressionDot(): { } {
	<DOT> ExpressionDotL()
}

void ExpressionDotL(): { } {
	<LEN>
	|
	(<ID> <OPAREN> Expression() (<COL> Expression())* <CPAREN>)
}

void ExpressionTerminal(): { } {
	<NUM>
	| 
	<TRUE>
	|
	<FALSE>
	|
	<ID>
	|
	<THIS>
	|
	ExpressionNew()
	| 
	(<OPAREN> Expression() <CPAREN>)
}

void ExpressionNew(): { } {
	<NEW> ExpressionNewL()
}

void ExpressionNewL(): { } {
	(<INT> <OSBRACKET> Expression() <CSBRACKET>)
	|
	(<ID> <OPAREN> <CPAREN>)
}