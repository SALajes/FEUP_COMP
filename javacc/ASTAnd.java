
/* Generated By:JJTree: Do not edit this line. javacc.ASTAnd.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAnd extends SimpleNode {
  protected final String operator = "&&";

  public ASTAnd(int id) {
    super(id);
    this.return_type = "boolean";
    this.binary_operator=true;
  }

  public ASTAnd(Javamm p, int id) {
    super(p, id);
    this.return_type = "boolean";
    this.binary_operator=true;
  }

  @Override
  public String toString(){
    return "&&";
  }

  @Override
  protected void checkNodeSemantics(SymbolTable symbol_table) {
   /* if(this.jjtGetNumChildren() == 2) {
      SimpleNode left_child = (SimpleNode) this.jjtGetChild(0);
      SimpleNode right_child = (SimpleNode) this.jjtGetChild(1);

      if(!left_child.isBinaryOperator()){
        if(!(left_child.getType() == "boolean" || symbol_table.checkVariable(this.getScope(), left_child.getIdentity(), "boolean"))){
          SemanticErrorHandler.getInstance().printError(this.getScope(), "Left child of operator " + operator + " has to be an boolean or a boolean variable");
        }
      }
      if(!right_child.isBinaryOperator()){
        if(!(right_child.getType() == "boolean" || symbol_table.checkVariable(this.getScope(), right_child.getIdentity(), "boolean"))){
          SemanticErrorHandler.getInstance().printError(this.getScope(), "Right child of operator " + operator + " has to be an boolean or a boolean variable");
        }
      }
    }*/
  }

}
/* JavaCC - OriginalChecksum=237089df49022529c77790c4eb238346 (do not edit this line) */
